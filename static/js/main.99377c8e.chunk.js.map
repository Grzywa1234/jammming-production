{"version":3,"sources":["util/Spotify.js","Components/SearchBar/SearchBar.js","Components/Track/Track.js","Components/TrackList/TrackList.js","Components/SearchResult/SearchResult.js","Components/Playlist/Playlist.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["accessToken","SearchBar","props","state","term","search","bind","handleTermChange","this","onSearch","event","setState","target","value","className","placeholder","onChange","onClick","React","Component","Track","addTrack","removeTrack","renderUrl","renderIframe","track","uri","isRemoval","title","src","width","height","frameBorder","allowtransparency","allow","onAdd","onRemove","name","artist","album","renderAction","TrackList","tracks","map","key","id","SearchResult","Playlist","handleNameChange","onNameChange","playlistTracks","onSave","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","fetch","headers","Authorization","then","response","json","jsonResponse","console","log","items","artists","savePlayList","trackUris","length","userId","method","body","JSON","stringify","playlistId","uris","App","SearchResults","playlistName","updatePlaylistName","savePlaylist","find","savedTrack","push","filter","currentTrack","alert","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.99377c8e.chunk.js","sourcesContent":["const cliendId = '82eb8ebc93a74e2e89f1e9d335b31d12';\r\nconst redirectUri = 'http://localhost:3000/'\r\n\r\nlet accessToken;\r\n\r\nconst Spotify = {\r\n    getAccessToken() {\r\n        if (accessToken) {\r\n            return accessToken\r\n        }\r\n\r\n        //check access token match \r\n        const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\r\n        const expiresMatch = window.location.href.match(/expires_in=([^&]*)/)\r\n\r\n        if (accessTokenMatch && expiresMatch) {\r\n            accessToken = accessTokenMatch[1];\r\n            const expiresIn = Number(expiresMatch[1])\r\n            window.setTimeout(() => accessToken = '', expiresIn * 1000);\r\n            window.history.pushState('Access Token', null, '/');\r\n            return accessToken;\r\n        } else {\r\n            const accessUrl = `https://accounts.spotify.com/authorize?client_id=${cliendId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`\r\n            window.location = accessUrl;\r\n        }\r\n    },\r\n\r\n    search(term) {\r\n        const accessToken = Spotify.getAccessToken();\r\n        return fetch (`https://api.spotify.com/v1/search?type=track&q=${term}`, \r\n        { headers: {\r\n            Authorization: `Bearer ${accessToken}`\r\n        }}).then(response => {\r\n            return response.json();\r\n        }).then(jsonResponse => {\r\n            console.log(jsonResponse)\r\n            if (!jsonResponse.tracks) {\r\n                return [];\r\n            } else {\r\n            return jsonResponse.tracks.items.map(track => ({\r\n                id: track.id,\r\n                name: track.name,\r\n                artist: track.artists[0].name,\r\n                album: track.album.name,\r\n                uri: track.uri\r\n            })); \r\n        }})\r\n        },\r\n\r\n        savePlayList(name, trackUris) {\r\n            if (!name || !trackUris.length) {\r\n                return; \r\n            } \r\n\r\n            const accessToken = Spotify.getAccessToken();\r\n            const headers = { Authorization: `Bearer ${accessToken}` };\r\n            let userId;\r\n\r\n            return fetch('https://api.spotify.com/v1/me', {headers: headers}\r\n            ).then(response => response.json()\r\n            ).then(jsonResponse => {\r\n                console.log(jsonResponse.id)\r\n                userId = jsonResponse.id;\r\n                return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`,\r\n                {\r\n                headers: headers,\r\n                method: 'POST',\r\n                body: JSON.stringify({ name: name})\r\n                }).then(response => response.json()\r\n                ).then(jsonResponse => {\r\n                    const playlistId = jsonResponse.id;\r\n                    return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`,\r\n                    {\r\n                        headers: headers,\r\n                        method: 'POST',\r\n                        body: JSON.stringify({ uris: trackUris})\r\n                    })\r\n                })\r\n            })\r\n            \r\n        }\r\n\r\n};\r\n\r\nexport default Spotify;","import React from 'react';\r\nimport './SearchBar.css';\r\n\r\n\r\n\r\nclass SearchBar extends React.Component  {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            term: ''\r\n        }\r\n\r\n        this.search = this.search.bind(this);\r\n        this.handleTermChange = this.handleTermChange.bind(this);\r\n    }\r\n\r\n    search(){\r\n        this.props.onSearch(this.state.term)\r\n    }\r\n\r\n    handleTermChange(event){\r\n        this.setState({term: event.target.value})\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <div className=\"SearchBar\">\r\n                 <input placeholder=\"Enter A Song, Album, or Artist\" \r\n                    onChange={this.handleTermChange} />\r\n                 <button className=\"SearchButton\" onClick={this.search}>SEARCH</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SearchBar;","import React from 'react';\r\nimport './Track.css';\r\n\r\n\r\n\r\nclass Track extends React.Component  {\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.addTrack = this.addTrack.bind(this);\r\n        this.removeTrack = this.removeTrack.bind(this);\r\n        this.renderUrl = this.renderUrl.bind(this);\r\n        this.renderIframe = this.renderIframe.bind(this);\r\n    }\r\n\r\n    renderUrl() {\r\n        const base = 'https://open.spotify.com/embed?uri='\r\n        const url = `${base}${this.props.track.uri}`\r\n        return url;\r\n    }\r\n\r\n    renderAction() {\r\n        if (this.props.isRemoval) {\r\n            return <button className=\"Track-action\" onClick={this.removeTrack}>-</button>\r\n        } else {\r\n            return <button className=\"Track-action\" onClick={this.addTrack}>+</button>\r\n        }\r\n    }\r\n\r\n    renderIframe() {\r\n        if(this.props.track.uri) {\r\n            return <iframe title=\"Spotify player\" src={this.renderUrl()} width=\"80\" height=\"80\" frameBorder=\"0\" allowtransparency=\"true\" allow=\"encrypted-media\"></iframe>\r\n        }\r\n    }\r\n\r\n    addTrack() {\r\n        this.props.onAdd(this.props.track);\r\n\r\n    }\r\n\r\n    removeTrack() {\r\n        this.props.onRemove(this.props.track);\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <div className=\"Track\">\r\n             <div className=\"Track-information\">\r\n                <h3>{this.props.track.name}</h3>\r\n                <p>{this.props.track.artist} |  {this.props.track.album}</p>\r\n             </div>\r\n             {this.renderIframe()}\r\n             {this.renderAction()}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Track;","import React from 'react';\r\nimport './TrackList.css';\r\n\r\nimport Track from '../Track/Track';\r\n\r\n\r\n\r\nclass TrackList extends React.Component  {\r\n    render () {\r\n        return (\r\n            <div className=\"TrackList\">\r\n                { \r\n                    this.props.tracks.map(track => {\r\n                        return <Track track={track}\r\n                                      key={track.id} \r\n                                      onAdd={this.props.onAdd} \r\n                                      onRemove={this.props.onRemove}\r\n                                      isRemoval={this.props.isRemoval}/>\r\n                    })\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TrackList;","import React from 'react';\r\nimport './SearchResult.css';\r\n\r\nimport TrackList from '../TrackList/TrackList';\r\n\r\n\r\nclass SearchResult extends React.Component  {\r\n    render () {\r\n        return (\r\n            <div className=\"SearchResults\">\r\n             <h2>Results</h2>\r\n            <TrackList tracks={this.props.SearchResult} \r\n                        onAdd={this.props.onAdd}\r\n                        isRemoval={false}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SearchResult;","import React from 'react';\r\nimport './Playlist.css';\r\n\r\nimport TrackList from '../TrackList/TrackList'\r\n\r\nclass Playlist extends React.Component  {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleNameChange = this.handleNameChange.bind(this);\r\n    }\r\n\r\n    handleNameChange(event) {\r\n        this.props.onNameChange(event.target.value)\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <div className=\"Playlist\">\r\n            <input placeholder={\"Add playlist name\"} onChange={this.handleNameChange}/>\r\n             <TrackList tracks={this.props.playlistTracks}\r\n                        onRemove={this.props.onRemove}\r\n                        isRemoval={true}/>\r\n             <button className=\"Playlist-save\" onClick={this.props.onSave}>SAVE TO SPOTIFY</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Playlist;","import React from 'react';\nimport './App.css';\nimport SearchBar from '../SearchBar/SearchBar';\nimport SearchResult from '../SearchResult/SearchResult';\nimport Playlist from '../Playlist/Playlist';\nimport Spotify from '../../util/Spotify';\n//import { ReactComponent } from '*.svg';\n//import { render } from '@testing-library/react';\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      SearchResults: [{name: \"Never Gonna Give You Up\", artist: \"Rick Astley\", album: 'Whenever You Need Somebody', id: \"4uLU6hMCjMI75M1A2tKUQC\", uri: \"spotify:track:4uLU6hMCjMI75M1A2tKUQC\"}, \n      {name: 'Deja Vu (Initial D)', artist: 'Tsuko G.', album: 'Deja Vu (Initial D)', id: \"3O3lPNMM2rCeog7dacQNbT\", uri: \"spotify:track:3O3lPNMM2rCeog7dacQNbT\"}],\n      playlistName: 'My playlist',\n      playlistTracks: []\n    }\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n  }\n\n  addTrack(track) {\n    let tracks = this.state.playlistTracks;\n    if (tracks.find(savedTrack => savedTrack.id === track.id)) {\n      return;\n    } else {\n\n    tracks.push(track);\n    this.setState({playlistTracks: tracks})\n    }\n  }\n\n  removeTrack(track) {\n    let tracks = this.state.playlistTracks;\n    tracks = tracks.filter(currentTrack => currentTrack.id !== track.id)\n\n    this.setState({playlistTracks: tracks})\n  }\n\n  updatePlaylistName(name) {\n    this.setState({playlistName: name})\n  }\n\n  savePlaylist(){\n    alert('Saved to Spotify!')\n    const trackUris = this.state.playlistTracks.map(track => track.uri);\n    Spotify.savePlayList(this.state.playlistName, trackUris).then(() => {\n      this.setState({\n        playlistName: 'New playlist',\n        playlistTracks: []\n      })\n    })\n  }\n\n  search(term){\n    Spotify.search(term).then(SearchResults => {\n      this.setState({SearchResults: SearchResults})\n    });\n  }\n\n  render() {\n    \n    Spotify.getAccessToken();\n\n  return (\n    <div>\n      <h1>Grzyw<span className=\"highlight\">@</span>1234</h1>\n      <div className=\"App\">\n         <SearchBar onSearch={this.search}/>\n        <div className=\"App-playlist\">\n          <SearchResult SearchResult={this.state.SearchResults}\n                          onAdd={this.addTrack}/>\n          <Playlist playlistName={this.state.playlistName}\n                    playlistTracks={this.state.playlistTracks}\n                    onRemove={this.removeTrack}\n                    onNameChange={this.updatePlaylistName}\n                    onSave={this.savePlaylist} />\n        </div>\n      </div>\n    </div>\n  );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}